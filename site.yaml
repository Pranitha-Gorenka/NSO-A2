- hosts: webservers
  become: true
  tasks:
    - name: Install Apache2
      apt:
        name: apache2
        state: present

    - name: Install libapache2-mod-wsgi-py3
      apt:
        name: libapache2-mod-wsgi-py3
        state: present

    - name: Install python-pip
      apt:
        name: python-pip
        state: present

    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Install Flask
      pip:
        name: flask
        state: present

    - name: Create flaskapp directory
      file:
        path: /var/www/html/flaskapp
        state: directory
        mode: '0755'

    - name: Create flaskapp.py file
      copy:
        dest: /var/www/html/flaskapp/flaskapp.py
        content: |
          import flask
          import time
          import socket

          h_name = socket.gethostname()
          IP_addres = socket.gethostbyname(h_name)

          app = flask.Flask(__name__)

          @app.route('/')
          def index():
              Time= time.strftime("%H:%M:%S")
              return Time+" Serving from "+h_name+" ("+IP_addres+")\n"
          if __name__ == '__main__':
              app.run(debug=True, host='0.0.0.0')    

    - name: Create flaskapp.wsgi file
      copy:
        dest: /var/www/html/flaskapp/flaskapp.wsgi
        content: |
          import sys
          sys.path.insert(0, '/var/www/html/flaskapp')
          from flaskapp import app as application

    - name: Update Apache2 configuration
      lineinfile:
        path: /etc/apache2/sites-enabled/000-default.conf
        line: |
          WSGIDaemonProcess flaskapp threads=5
          WSGIScriptAlias / /var/www/html/flaskapp/flaskapp.wsgi
          <Directory flaskapp>
              WSGIProcessGroup flaskapp
              WSGIApplicationGroup %{GLOBAL}
              Order deny,allow
              Allow from all
          </Directory>
        insertafter: "DocumentRoot /var/www/html"
        regexp: "^WSGIDaemonProcess flaskapp threads=5"

    - name: Restart Apache2 service
      service:
        name: apache2
        state: restarted


-  hosts: haproxy
   become: true
   tasks:
     - name: Add HAProxy PPA
       apt_repository:
        repo: 'ppa:vbernat/haproxy-2.4'
        
     - name: Install HAProxy
       apt:
        name: haproxy=2.4.*
        update_cache: yes
         
     - name: Configure HAProxy
       template:
        src: ./haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
       vars:
        haproxy_ip: "{{ hostvars['haproxy']['ansible_default_ipv4']['address'] }}"
       when: "'ansible_default_ipv4' in hostvars['haproxy']"
      
     - name: Restart HAProxy
       become: true
       service:
        name: haproxy
        state: restarted
        
     - name: Install Apache2
       apt:
        name: apache2
        update_cache: yes
        
     - name: Enable Apache2 modules
       apache2_module:
        name: "{{ item }}"
        state: present
       with_items:
        - proxy
        - proxy_http
        - lbmethod_byrequests
        - headers
        
     - name: Change Apache2 port
       lineinfile:
        path: /etc/apache2/ports.conf
        regexp: '^Listen .*'
        line: 'Listen 8080'
       
      
     - name: Restart Apache2
       become: true
       service:
        name: apache2
        state: restarted 

-  hosts: haproxy
   tasks:
     - name: Display haproxy IP address
       debug:
        var: hostvars[inventory_hostname]['ansible_default_ipv4']['address']

     - name: Send HTTP request to haproxy
       uri:
        url: http://{{ansible_default_ipv4.address}}
        method: GET
        return_content: yes
        status_code: 200
       register: curl_output
       with_sequence: start=1 end=3
       delay: 5

     - name: Display HTTP response
       debug:
        msg: "{{ curl_output.results }}"
